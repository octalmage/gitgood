// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitgood/goal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Goal struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id         uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Label      string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Comparison int32  `protobuf:"varint,4,opt,name=comparison,proto3" json:"comparison,omitempty"`
	Exp        int32  `protobuf:"varint,5,opt,name=exp,proto3" json:"exp,omitempty"`
	CreatedAt  int32  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *Goal) Reset()         { *m = Goal{} }
func (m *Goal) String() string { return proto.CompactTextString(m) }
func (*Goal) ProtoMessage()    {}
func (*Goal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7910002bf41df31, []int{0}
}
func (m *Goal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Goal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Goal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Goal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Goal.Merge(m, src)
}
func (m *Goal) XXX_Size() int {
	return m.Size()
}
func (m *Goal) XXX_DiscardUnknown() {
	xxx_messageInfo_Goal.DiscardUnknown(m)
}

var xxx_messageInfo_Goal proto.InternalMessageInfo

func (m *Goal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Goal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Goal) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Goal) GetComparison() int32 {
	if m != nil {
		return m.Comparison
	}
	return 0
}

func (m *Goal) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Goal) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Goal)(nil), "octalmage.gitgood.gitgood.Goal")
}

func init() { proto.RegisterFile("gitgood/goal.proto", fileDescriptor_c7910002bf41df31) }

var fileDescriptor_c7910002bf41df31 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xce, 0xa5, 0x49, 0x51, 0x6f, 0x40, 0xe8, 0xd4, 0xc1, 0x20, 0x64, 0x45, 0x4c, 0x19, 0x50,
	0x32, 0xf0, 0x04, 0x30, 0xc0, 0x9e, 0x91, 0xcd, 0x49, 0x2c, 0x63, 0xc9, 0xe1, 0xa2, 0xd4, 0x48,
	0xe5, 0x2d, 0x98, 0x78, 0x26, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x11, 0x54, 0x97, 0x94, 0x4e, 0xf7,
	0xfd, 0x9d, 0x4e, 0xdf, 0x21, 0x19, 0xeb, 0x0d, 0x73, 0x5b, 0x1a, 0x56, 0xae, 0xe8, 0x07, 0xf6,
	0x4c, 0x97, 0xdc, 0x78, 0xe5, 0x3a, 0x65, 0x74, 0xf1, 0xe7, 0xce, 0xf3, 0x6a, 0x6d, 0xd8, 0x70,
	0x48, 0x95, 0x7b, 0x74, 0x58, 0xb8, 0xf9, 0x04, 0x4c, 0x9e, 0x58, 0x39, 0x12, 0x78, 0xd6, 0x0c,
	0x5a, 0x79, 0x1e, 0x04, 0x64, 0x90, 0xaf, 0xaa, 0x99, 0xd2, 0x39, 0xc6, 0xb6, 0x15, 0x71, 0x06,
	0x79, 0x52, 0xc5, 0xb6, 0xa5, 0x35, 0xa6, 0x4e, 0xd5, 0xda, 0x89, 0x45, 0xc8, 0x1d, 0x08, 0x49,
	0xc4, 0x86, 0xbb, 0x5e, 0x0d, 0x76, 0xc3, 0xaf, 0x22, 0xc9, 0x20, 0x4f, 0xab, 0x13, 0x85, 0x2e,
	0x70, 0xa1, 0xb7, 0xbd, 0x48, 0x83, 0xb1, 0x87, 0x74, 0x8d, 0xab, 0x70, 0x42, 0xb7, 0xf7, 0x5e,
	0x2c, 0x83, 0xfe, 0x2f, 0x3c, 0x3c, 0x7e, 0x8d, 0x12, 0x76, 0xa3, 0x84, 0x9f, 0x51, 0xc2, 0xc7,
	0x24, 0xa3, 0xdd, 0x24, 0xa3, 0xef, 0x49, 0x46, 0xcf, 0xb7, 0xc6, 0xfa, 0x97, 0xb7, 0xba, 0x68,
	0xb8, 0x2b, 0x8f, 0x75, 0xcb, 0xf9, 0x19, 0xdb, 0x23, 0xf2, 0xef, 0xbd, 0xde, 0xd4, 0xcb, 0xd0,
	0xf3, 0xee, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xea, 0x82, 0x8c, 0x2e, 0x01, 0x00, 0x00,
}

func (m *Goal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Goal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Goal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintGoal(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Exp != 0 {
		i = encodeVarintGoal(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x28
	}
	if m.Comparison != 0 {
		i = encodeVarintGoal(dAtA, i, uint64(m.Comparison))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintGoal(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintGoal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGoal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGoal(dAtA []byte, offset int, v uint64) int {
	offset -= sovGoal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Goal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGoal(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGoal(uint64(m.Id))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovGoal(uint64(l))
	}
	if m.Comparison != 0 {
		n += 1 + sovGoal(uint64(m.Comparison))
	}
	if m.Exp != 0 {
		n += 1 + sovGoal(uint64(m.Exp))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovGoal(uint64(m.CreatedAt))
	}
	return n
}

func sovGoal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGoal(x uint64) (n int) {
	return sovGoal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Goal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Goal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Goal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comparison", wireType)
			}
			m.Comparison = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comparison |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGoal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGoal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGoal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGoal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGoal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGoal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGoal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGoal = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitgood/stat.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stat struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id       uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StatType int32  `protobuf:"varint,3,opt,name=statType,proto3" json:"statType,omitempty"`
	Initial  int32  `protobuf:"varint,4,opt,name=initial,proto3" json:"initial,omitempty"`
	Final    int32  `protobuf:"varint,5,opt,name=final,proto3" json:"final,omitempty"`
	Owner    string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Stat) Reset()         { *m = Stat{} }
func (m *Stat) String() string { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()    {}
func (*Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9e8cc33108c68, []int{0}
}
func (m *Stat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stat.Merge(m, src)
}
func (m *Stat) XXX_Size() int {
	return m.Size()
}
func (m *Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_Stat proto.InternalMessageInfo

func (m *Stat) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Stat) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Stat) GetStatType() int32 {
	if m != nil {
		return m.StatType
	}
	return 0
}

func (m *Stat) GetInitial() int32 {
	if m != nil {
		return m.Initial
	}
	return 0
}

func (m *Stat) GetFinal() int32 {
	if m != nil {
		return m.Final
	}
	return 0
}

func (m *Stat) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*Stat)(nil), "octalmage.gitgood.gitgood.Stat")
}

func init() { proto.RegisterFile("gitgood/stat.proto", fileDescriptor_5cb9e8cc33108c68) }

var fileDescriptor_5cb9e8cc33108c68 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xb1, 0x52, 0x84, 0x30,
	0x10, 0x86, 0x59, 0x84, 0x53, 0x53, 0x58, 0x64, 0xae, 0x88, 0x57, 0x64, 0x18, 0x2b, 0x0a, 0x07,
	0x0a, 0xdf, 0xc0, 0xc2, 0x07, 0x40, 0x2b, 0xbb, 0x1c, 0xc4, 0xb8, 0x33, 0x1c, 0xcb, 0x70, 0xeb,
	0xe8, 0xbd, 0x85, 0xe3, 0x53, 0x59, 0x52, 0x5a, 0x3a, 0xf0, 0x22, 0x0e, 0x41, 0xa8, 0xb2, 0xdf,
	0xff, 0x27, 0xf9, 0xe7, 0x5f, 0x21, 0x1d, 0xb2, 0x23, 0xaa, 0xf2, 0x23, 0x1b, 0xce, 0xda, 0x8e,
	0x98, 0xe4, 0x35, 0x95, 0x6c, 0xea, 0x83, 0x71, 0x36, 0xfb, 0x77, 0x97, 0x73, 0xb7, 0x75, 0xe4,
	0xc8, 0xdf, 0xca, 0xa7, 0x69, 0x7e, 0x70, 0xf3, 0x05, 0x22, 0x7a, 0x64, 0xc3, 0x52, 0x89, 0xf3,
	0xb2, 0xb3, 0x86, 0xa9, 0x53, 0x90, 0x40, 0x7a, 0x59, 0x2c, 0x28, 0xaf, 0x44, 0x88, 0x95, 0x0a,
	0x13, 0x48, 0xa3, 0x22, 0xc4, 0x4a, 0xee, 0xc4, 0xc5, 0x94, 0xf8, 0x74, 0x6a, 0xad, 0x3a, 0x4b,
	0x20, 0x8d, 0x8b, 0x95, 0xa7, 0x5f, 0xb0, 0x41, 0x46, 0x53, 0xab, 0xc8, 0x5b, 0x0b, 0xca, 0xad,
	0x88, 0x5f, 0xb0, 0x31, 0xb5, 0x8a, 0xbd, 0x3e, 0xc3, 0xa4, 0xd2, 0x7b, 0x63, 0x3b, 0xb5, 0xf1,
	0x99, 0x33, 0xdc, 0x3f, 0x7c, 0x0f, 0x1a, 0xfa, 0x41, 0xc3, 0xef, 0xa0, 0xe1, 0x73, 0xd4, 0x41,
	0x3f, 0xea, 0xe0, 0x67, 0xd4, 0xc1, 0xf3, 0xad, 0x43, 0x7e, 0x7d, 0xdb, 0x67, 0x25, 0x1d, 0xf2,
	0xb5, 0x6a, 0xbe, 0x2c, 0xe2, 0x63, 0x9d, 0xf8, 0xd4, 0xda, 0xe3, 0x7e, 0xe3, 0x3b, 0xde, 0xfd,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x06, 0x84, 0xce, 0x18, 0x2a, 0x01, 0x00, 0x00,
}

func (m *Stat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintStat(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if m.Final != 0 {
		i = encodeVarintStat(dAtA, i, uint64(m.Final))
		i--
		dAtA[i] = 0x28
	}
	if m.Initial != 0 {
		i = encodeVarintStat(dAtA, i, uint64(m.Initial))
		i--
		dAtA[i] = 0x20
	}
	if m.StatType != 0 {
		i = encodeVarintStat(dAtA, i, uint64(m.StatType))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintStat(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintStat(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStat(dAtA []byte, offset int, v uint64) int {
	offset -= sovStat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovStat(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovStat(uint64(m.Id))
	}
	if m.StatType != 0 {
		n += 1 + sovStat(uint64(m.StatType))
	}
	if m.Initial != 0 {
		n += 1 + sovStat(uint64(m.Initial))
	}
	if m.Final != 0 {
		n += 1 + sovStat(uint64(m.Final))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovStat(uint64(l))
	}
	return n
}

func sovStat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStat(x uint64) (n int) {
	return sovStat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatType", wireType)
			}
			m.StatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			m.Initial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initial |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			m.Final = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Final |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStat = fmt.Errorf("proto: unexpected end of group")
)

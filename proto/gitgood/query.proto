syntax = "proto3";
package octalmage.gitgood.gitgood;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "gitgood/achievement.proto";
import "gitgood/goal.proto";
import "gitgood/stat.proto";
import "gitgood/team.proto";

option go_package = "github.com/octalmage/gitgood/x/gitgood/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a list of getTeamExp items.
	rpc GetTeamExp(QueryGetTeamExpRequest) returns (QueryGetTeamExpResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/getTeamExp";
	}


	// Queries a achievement by id.
	rpc Achievement(QueryGetAchievementRequest) returns (QueryGetAchievementResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/achievement/{id}";
	}

	// Queries a list of achievement items.
	rpc AchievementAll(QueryAllAchievementRequest) returns (QueryAllAchievementResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/achievement";
	}


	// Queries a goal by id.
	rpc Goal(QueryGetGoalRequest) returns (QueryGetGoalResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/goal/{id}";
	}

	// Queries a list of goal items.
	rpc GoalAll(QueryAllGoalRequest) returns (QueryAllGoalResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/goal";
	}


	// Queries a stat by id.
	rpc Stat(QueryGetStatRequest) returns (QueryGetStatResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/stat/{id}";
	}

	// Queries a list of stat items.
	rpc StatAll(QueryAllStatRequest) returns (QueryAllStatResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/stat";
	}


	// Queries a team by id.
	rpc Team(QueryGetTeamRequest) returns (QueryGetTeamResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/team/{id}";
	}

	// Queries a list of team items.
	rpc TeamAll(QueryAllTeamRequest) returns (QueryAllTeamResponse) {
		option (google.api.http).get = "/octalmage/gitgood/gitgood/team";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetTeamExpRequest {
  string team = 1;
}

message QueryGetTeamExpResponse {
	int64 balance = 1;
}

message QueryGetAchievementRequest {
	uint64 id = 1;
}

message QueryGetAchievementResponse {
	Achievement Achievement = 1;
}

message QueryAllAchievementRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAchievementResponse {
	repeated Achievement Achievement = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetGoalRequest {
	uint64 id = 1;
}

message QueryGetGoalResponse {
	Goal Goal = 1;
}

message QueryAllGoalRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGoalResponse {
	repeated Goal Goal = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetStatRequest {
	uint64 id = 1;
}

message QueryGetStatResponse {
	Stat Stat = 1;
}

message QueryAllStatRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStatResponse {
	repeated Stat Stat = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetTeamRequest {
	uint64 id = 1;
}

message QueryGetTeamResponse {
	Team Team = 1;
}

message QueryAllTeamRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTeamResponse {
	repeated Team Team = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
